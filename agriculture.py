import streamlit as st
import cv2
import numpy as np
from PIL import Image
import tempfile
from gtts import gTTS
import os

# Simple cloud detection based on colors (later you can replace with ML model)
def detect_cloud_type(image):
    img = np.array(image)
    avg_color = img.mean(axis=(0, 1))  # [B, G, R]

    if avg_color[2] > avg_color[1] and avg_color[2] > avg_color[0]:
        return "Cirrus (Thin, White Clouds)"
    elif avg_color[1] > avg_color[0] and avg_color[1] > avg_color[2]:
        return "Cumulus (Fluffy White Clouds)"
    else:
        return "Stratus (Grayish Layered Clouds)"

# Simple moisture detection from nostoc color
def detect_moisture_level(image):
    img = np.array(image)

    avg_color = img.mean(axis=(0, 1))  # [B, G, R]

    if avg_color[1] > avg_color[2] and avg_color[1] > avg_color[0]:
        return "Moist (Bright Green/Blue-Green)"
    else:
        return "Dry (Dark Green/Brown/Black)"

# Combined advice based on moisture & cloud
def generate_combined_advice(moisture, cloud_type):
    advice = ""

    if moisture == "Moist (Bright Green/Blue-Green)":
        advice += "‡§Æ‡§ø‡§ü‡•ç‡§ü‡•Ä ‡§Æ‡•á‡§Ç ‡§®‡§Æ‡•Ä ‡§Ö‡§ö‡•ç‡§õ‡•Ä ‡§π‡•à‡•§ ‡§â‡§∞‡•ç‡§µ‡§∞‡§ï ‡§ï‡•Ä ‡§Æ‡§æ‡§§‡•ç‡§∞‡§æ ‡§ï‡§Æ ‡§∞‡§ñ‡•á‡§Ç‡•§\n"
    else:
        advice += "‡§ñ‡•á‡§§ ‡§∏‡•Ç‡§ñ‡§æ ‡§π‡•à, ‡§§‡•Å‡§∞‡§Ç‡§§ ‡§∏‡§ø‡§Ç‡§ö‡§æ‡§à ‡§ï‡§∞‡•á‡§Ç‡•§ 50 ‡§≤‡•Ä‡§ü‡§∞ ‡§™‡§æ‡§®‡•Ä ‡§™‡•ç‡§∞‡§§‡§ø ‡§¨‡•Ä‡§ò‡§æ ‡§°‡§æ‡§≤‡•á‡§Ç‡•§\n"

    if cloud_type in ["Cirrus (Thin, White Clouds)", "Cirrocumulus", "Cirrostratus"]:
        advice += "‚ö†Ô∏è ‡§ö‡•á‡§§‡§æ‡§µ‡§®‡•Ä: ‡§Ü‡§∏‡§Æ‡§æ‡§® ‡§Æ‡•á‡§Ç ‡§ö‡§ï‡•ç‡§∞‡§µ‡§æ‡§§ ‡§ï‡•á ‡§≤‡§ï‡•ç‡§∑‡§£ ‡§¶‡§ø‡§ñ ‡§∞‡§π‡•á ‡§π‡•à‡§Ç‡•§ ‡§ñ‡•á‡§§ ‡§ï‡•ã ‡§∏‡•Å‡§∞‡§ï‡•ç‡§∑‡§ø‡§§ ‡§ï‡§∞‡•á‡§Ç‡•§\n"
    else:
        advice += "‡§Æ‡•å‡§∏‡§Æ ‡§∏‡§æ‡§Æ‡§æ‡§®‡•ç‡§Ø ‡§π‡•à, ‡§ï‡•Ä‡§ü‡§®‡§æ‡§∂‡§ï ‡§î‡§∞ ‡§â‡§∞‡•ç‡§µ‡§∞‡§ï ‡§ï‡§æ ‡§∏‡§Ç‡§§‡•Å‡§≤‡§® ‡§¨‡§®‡§æ‡§è‡§Ç‡•§\n"

    advice += f"(Moisture: {moisture}, Cloud Type: {cloud_type})"
    return advice

def text_to_speech(text, lang='hi'):
    tts = gTTS(text=text, lang=lang)
    with tempfile.NamedTemporaryFile(delete=False, suffix=".mp3") as temp_audio:
        tts.save(temp_audio.name)
        return temp_audio.name

st.title("üåæ AI Krishi Assistant - Moisture & Cyclone Predictor")

st.header("Step 1: ‡§ñ‡•á‡§§ ‡§ï‡•Ä ‡§Æ‡§ø‡§ü‡•ç‡§ü‡•Ä (Nostoc) ‡§ï‡•Ä ‡§´‡•ã‡§ü‡•ã ‡§ñ‡•Ä‡§Ç‡§ö‡•á‡§Ç")
soil_image = st.camera_input("‡§ï‡•É‡§™‡§Ø‡§æ Nostoc ‡§µ‡§æ‡§≤‡•Ä ‡§Æ‡§ø‡§ü‡•ç‡§ü‡•Ä ‡§ï‡•Ä ‡§´‡•ã‡§ü‡•ã ‡§≤‡•á‡§Ç")

st.header("Step 2: ‡§Ü‡§ï‡§æ‡§∂ ‡§ï‡•Ä ‡§´‡•ã‡§ü‡•ã ‡§ñ‡•Ä‡§Ç‡§ö‡•á‡§Ç")
sky_image = st.camera_input("‡§ï‡•É‡§™‡§Ø‡§æ ‡§Ü‡§ï‡§æ‡§∂ ‡§ï‡•Ä ‡§´‡•ã‡§ü‡•ã ‡§≤‡•á‡§Ç")

if soil_image and sky_image:
    # Process Soil (Moisture Detection)
    soil_img = Image.open(soil_image)
    st.image(soil_img, caption="Nostoc Image (Soil Condition)", use_column_width=True)
    moisture_level = detect_moisture_level(soil_img)

    # Process Sky (Cloud Detection)
    sky_img = Image.open(sky_image)
    st.image(sky_img, caption="Sky Image (Cloud Condition)", use_column_width=True)
    cloud_type = detect_cloud_type(sky_img)

    st.write(f"üìä Moisture Level: **{moisture_level}**")
    st.write(f"‚òÅÔ∏è Cloud Type: **{cloud_type}**")

    advice = generate_combined_advice(moisture_level, cloud_type)
    st.write("üßë‚Äçüåæ **‡§ï‡§ø‡§∏‡§æ‡§® ‡§∏‡§≤‡§æ‡§π:**")
    st.write(advice)

    # Hindi Audio Advice
    audio_file = text_to_speech(advice)

    st.audio(audio_file, format='audio/mp3')

    # Clean temp audio file
    os.remove(audio_file)
